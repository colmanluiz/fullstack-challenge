/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TasksRouteImport } from './routes/tasks'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as TasksNewRouteImport } from './routes/tasks/new'
import { Route as TasksIdRouteImport } from './routes/tasks/$id'
import { Route as TasksIdEditRouteImport } from './routes/tasks/$id.edit'

const TasksRoute = TasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksRoute,
} as any)
const TasksNewRoute = TasksNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => TasksRoute,
} as any)
const TasksIdRoute = TasksIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TasksRoute,
} as any)
const TasksIdEditRoute = TasksIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TasksIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/$id': typeof TasksIdRouteWithChildren
  '/tasks/new': typeof TasksNewRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/$id/edit': typeof TasksIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/tasks/$id': typeof TasksIdRouteWithChildren
  '/tasks/new': typeof TasksNewRoute
  '/tasks': typeof TasksIndexRoute
  '/tasks/$id/edit': typeof TasksIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRouteWithChildren
  '/tasks/$id': typeof TasksIdRouteWithChildren
  '/tasks/new': typeof TasksNewRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/$id/edit': typeof TasksIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/tasks'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/'
    | '/tasks/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks'
    | '/tasks/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/tasks'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/'
    | '/tasks/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  TasksRoute: typeof TasksRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof TasksRoute
    }
    '/tasks/new': {
      id: '/tasks/new'
      path: '/new'
      fullPath: '/tasks/new'
      preLoaderRoute: typeof TasksNewRouteImport
      parentRoute: typeof TasksRoute
    }
    '/tasks/$id': {
      id: '/tasks/$id'
      path: '/$id'
      fullPath: '/tasks/$id'
      preLoaderRoute: typeof TasksIdRouteImport
      parentRoute: typeof TasksRoute
    }
    '/tasks/$id/edit': {
      id: '/tasks/$id/edit'
      path: '/edit'
      fullPath: '/tasks/$id/edit'
      preLoaderRoute: typeof TasksIdEditRouteImport
      parentRoute: typeof TasksIdRoute
    }
  }
}

interface TasksIdRouteChildren {
  TasksIdEditRoute: typeof TasksIdEditRoute
}

const TasksIdRouteChildren: TasksIdRouteChildren = {
  TasksIdEditRoute: TasksIdEditRoute,
}

const TasksIdRouteWithChildren =
  TasksIdRoute._addFileChildren(TasksIdRouteChildren)

interface TasksRouteChildren {
  TasksIdRoute: typeof TasksIdRouteWithChildren
  TasksNewRoute: typeof TasksNewRoute
  TasksIndexRoute: typeof TasksIndexRoute
}

const TasksRouteChildren: TasksRouteChildren = {
  TasksIdRoute: TasksIdRouteWithChildren,
  TasksNewRoute: TasksNewRoute,
  TasksIndexRoute: TasksIndexRoute,
}

const TasksRouteWithChildren = TasksRoute._addFileChildren(TasksRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  TasksRoute: TasksRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
